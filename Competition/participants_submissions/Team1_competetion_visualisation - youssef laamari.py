# -*- coding: utf-8 -*-
"""Copie de competetion-visualisation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jvjSAq5oHXMmVz40steWvD3DMvCB-lAj

#      Projet Competition

<ul style="list-style-type:none;">
  <li style="font-weight: bold;font-family:Trebuchet MS;font-size:35px;font-style: italic;color:  blue">L'accident d'avion à travers le monde</li>
</ul>
<img alt="Insight logo" src="https://upload.wikimedia.org/wikipedia/commons/a/a4/PenAir_Flight_3296%EF%BC%88N686PA%EF%BC%89_after_crash_landing.jpg" align="left" hspace="10px" vspace="10px" width=100% height=70% >
<p style="font-size:20px; font-family: Trebuchet MS; font-style:italic;">
Ces données contient des informations sur les accidents d'avion à travers le monde. Les données couvrent la période de septembre 1908 à août 2008. Plusieurs entités diffusent des données sur les accidents aériens, notamment le pays, le continent, l'opérateur, les décès, le type d'aéronef et la raison de l'accident. Actuellement, ce jeu de données comprend 5268 enregistrements d'accidents d'avion.
</p>

* Index : l'index de la ligne
* Date : la date de l'incident
* Time : l'heure de l'incident
* Location : l'emplacement de l'incident
* Operator : l'opérateur de l'aéronef
* Flight # : le numéro de vol de l'aéronef
* Route : la route de l'aéronef
* Type : le type d'aéronef
* Registration : l'immatriculation de l'aéronef
* cn/In : le numéro de construction/numéro de série de l'aéronef
* Aboard : le nombre de personnes à bord de l'aéronef
* Fatalities : le nombre de décès dans l'incident
* Ground : le nombre de personnes au sol tuées dans l'incident
* Summary : un résumé de l'incident
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# from google.colab import files

# uploaded = files.upload()

Accident_Airplane = pd.read_csv('Airplane_Crashes_and_Fatalities_Since_1908.csv')
nombre_de_lignes, nombre_de_colonnes = Accident_Airplane.shape
# Afficher le résultat
print(f"Nombre de lignes: {nombre_de_lignes}")
print(f"Nombre de colonnes: {nombre_de_colonnes}")

Accident_Airplane.info()

Accident_Airplane

#changer format date
Accident_Airplane.Date = pd.to_datetime(Accident_Airplane.Date)

"""###Checking for missing value

"""

#calculating missing values in rows
Accident_Airplane.isnull().sum()

"""# Cleaning Time and Date :

"""

# remplacer nvalue with 00:00
Accident_Airplane['Time'].fillna('00:00', inplace=True)

#Change type of collumn 'Time' to string
Accident_Airplane['Time'] = Accident_Airplane['Time'].astype(str)
# Remplacer les valeurs NaN et effectuer les remplacements nécessaires
Accident_Airplane['Time'] = Accident_Airplane['Time'].replace(np.nan, '00:00')
Accident_Airplane['Time'] = Accident_Airplane['Time'].astype(str).str.replace('c: ', '')
Accident_Airplane['Time'] = Accident_Airplane['Time'].astype(str).str.replace('c:', '')
Accident_Airplane['Time'] = Accident_Airplane['Time'].astype(str).str.replace('c', '')
Accident_Airplane['Time'] = Accident_Airplane['Time'].astype(str).str.replace('12\'20', '12:20')
Accident_Airplane['Time'] = Accident_Airplane['Time'].astype(str).str.replace('18.40', '18:40')
Accident_Airplane['Time'] = Accident_Airplane['Time'].astype(str).str.replace('0943', '09:43')
Accident_Airplane['Time'] = Accident_Airplane['Time'].astype(str).str.replace('22\'08', '22:08')
Accident_Airplane['Time'] = Accident_Airplane['Time'].astype(str).str.replace('114:20', '00:00') # is it 11:20 or 14:20 or something else?
# Convert 'Time' column to datetime format if it's not already
Accident_Airplane['Time'] = pd.to_datetime(Accident_Airplane['Time'], errors='coerce')
#convert to time format
Accident_Airplane['Time'] = pd.to_datetime(Accident_Airplane['Time'], format='%H:%M').dt.strftime('%H:%M')

Accident_Airplane.isnull().sum()

Accident_Airplane

Accident_Airplane['Ground'] = Accident_Airplane['Ground'].fillna(0.0)
Accident_Airplane['Fatalities'] = Accident_Airplane['Fatalities'].fillna(0.0)
Accident_Airplane['Aboard'] = Accident_Airplane['Aboard'].fillna(0.0)
Accident_Airplane['Location'] = Accident_Airplane['Location'].fillna('unknown')
Accident_Airplane['Operator'] = Accident_Airplane['Operator'].fillna('unknown')
Accident_Airplane.isnull().sum()

#Checking Redundancy of Rows
duplicate_rows = Accident_Airplane[Accident_Airplane.duplicated()]
print(duplicate_rows)

Accident_Airplane.describe().T

"""# Data Preprocesing and Data Visualition"""

# Extraire l'année dans une nouvelle colonne
Accident_Airplane['year'] = Accident_Airplane['Date'].dt.year

# Compter le nombre d'occurrences par année
annee_counts = Accident_Airplane['year'].value_counts().sort_index()

Temp = Accident_Airplane.groupby([Accident_Airplane['year'], Accident_Airplane['Date'].dt.year])['Date'].count().reset_index(name='Count')

plt.figure(figsize=(12, 6))
plt.style.use('bmh')
plt.plot(Temp['Date'], Temp['Count'], color='blue', marker='.', linewidth=1)
plt.xlabel('Year', fontsize=10)
plt.ylabel('Count', fontsize=10)
plt.title('Count of accidents by Year', loc='Center', fontsize=14)
plt.show()

"""En 1972, plusieurs accidents d'avion ont eu lieu, entraînant la perte de nombreuses vies. Les causes variaient, allant de problèmes météorologiques et de défaillances mécaniques à des erreurs de pilotage ."""

# Find the maximum count
max_count = Temp['Count'].max()

# Find the rows where the count is equal to the maximum count
max_count_rows = Temp[Temp['Count'] == max_count]

# Get the corresponding dates
dates_of_max_count = max_count_rows['Date'].tolist()

# Print the result
print("The maximum count is : ",max_count )
print("date corresponding :" ,dates_of_max_count[0])

Accident_Airplane["DayOfWeek"] = Accident_Airplane["Date"].dt.dayofweek

# Convert the numerical day of the week to the corresponding day name
Accident_Airplane["DayOfWeekName"] = Accident_Airplane["DayOfWeek"].map({
    0: "Monday",
    1: "Tuesday",
    2: "Wednesday",
    3: "Thursday",
    4: "Friday" ,
    5: "Saturday",
    6: "Sunday"
})

# Count the number of accidents per day of the week
accidents_per_DayOfWeek = Accident_Airplane["DayOfWeekName"].value_counts()

# Create a plot
plt.bar(accidents_per_DayOfWeek.index, accidents_per_DayOfWeek.values)
plt.xlabel("Day of Week")
plt.ylabel("Number of Accidents")

# Set the tick locations to match the number of tick labels
plt.xticks(accidents_per_DayOfWeek.index)

# Set the tick labels to the day of week names
plt.xticks(accidents_per_DayOfWeek.index)

plt.show()

"""Il est possible que les gens soient plus susceptibles de voyager en avion le vendredi et le jeudi, car ce sont les débuts de week-end."""

Accident_Airplane["month"] = Accident_Airplane["Date"].dt.month

# Count the number of accidents per month
accidents_per_month = Accident_Airplane["month"].value_counts()

# Create a plot
plt.bar(accidents_per_month.index, accidents_per_month.values)
plt.xlabel("Month")
plt.ylabel("Number of Accidents")
plt.title('NBR of accidents by month')

# Set the tick locations to match the number of tick labels
plt.xticks(accidents_per_month.index)

# Set the tick labels to the month names
plt.xticks(accidents_per_month.index)

plt.show()

"""### Les mois de juillet,Août,décembre et janvier sont associés à des périodes de vacances et de voyages fréquents. Une concentration d'accidents d'avion pendant ces mois peut être liée à l'augmentation du trafic aérien pendant les périodes de congé."""

#create data containes year, Fatalities, Ground, Aboard, and Operator
df = Accident_Airplane[['year', 'Fatalities','Ground','Aboard','Operator']]
# Group by 'year' and sum the 'Fatalities' for each year
fatalities_by_year = df.groupby('year')['Fatalities'].sum().reset_index()

#graph
plt.figure(figsize=(17, 6))
plt.bar(fatalities_by_year['year'], fatalities_by_year['Fatalities'],color='red')
plt.xlabel('Years')
plt.ylabel('Total Fatalities')
plt.title('Total Fatalities by Year')
plt.show()
# max and min fatalities
max_fatalities= fatalities_by_year['Fatalities'].max()
min_fatalities= fatalities_by_year['Fatalities'].min()

#the year of high fatalities
year_max_fatalities = fatalities_by_year.loc[fatalities_by_year['Fatalities'].idxmax(), 'year']
#the year of less fatalities
year_min_fatalities = fatalities_by_year.loc[fatalities_by_year['Fatalities'].idxmin(), 'year']
print("the year of high fatalities: ",year_max_fatalities ," with fatalities : ",int(max_fatalities))
print("the year of less fatalities: ",year_min_fatalities ," with fatalities : ",int(min_fatalities))

"""L'année présentant le nombre le plus élevé de décès est 1972, avec un total de 2937 victimes. En contraste, l'année ayant enregistré le moins de décès est 1908, avec seulement un seul décès répertorié."""

# Group by 'year' and sum the 'Ground' for each year
ground_by_year = df.groupby('year')['Ground'].sum().reset_index()
#graph
plt.figure(figsize=(12, 8))
plt.bar(ground_by_year['year'], ground_by_year['Ground'],color='green')
plt.xlabel('Years')
plt.ylabel('Total dead in Ground')
plt.title('Total dead in Ground by Year')
plt.show()
# max and min Ground
max_ground = ground_by_year['Ground'].max()
min_ground = ground_by_year['Ground'].min()
# list of years with min Ground
years_with_min_ground = ground_by_year[ground_by_year['Ground'] == min_ground]['year'].tolist()
# the year of high Ground
year_max_ground = ground_by_year.loc[ground_by_year['Ground'].idxmax(), 'year']
# the year of less Ground
year_min_ground = ground_by_year.loc[ground_by_year['Ground'].idxmin(), 'year']
print("the year of high dead Ground: ", year_max_ground, " with Ground: ", int(max_ground))
print("the years of less dead Ground: ",years_with_min_ground )
print(" with dead Ground: ", int(min_ground))

"""En 2001, les tragédies aériennes telles que le crash d'Air Caraïbes à Saint-Barthélemy, le vol 236 d'Air Transat, et les attentats du 11 septembre ont engendré la perte de nombreuses vies, y compris des pertes au sol. Ces événements ont ajouté une dimension particulièrement poignante, soulignant que les conséquences de ces catastrophes touchaient non seulement ceux à bord des avions, mais également des personnes au sol, renforçant ainsi la nature dévastatrice de ces événements sur l'ensemble de la société.  """

# Group by 'year' and sum the 'Aboard' for each year
aboard_by_year = df.groupby('year')['Aboard'].sum().reset_index()
# plotting
plt.figure(figsize=(13, 6))
plt.bar(aboard_by_year['year'], aboard_by_year['Aboard'], color='blue')
plt.xlabel('Years')
plt.ylabel('Total survived')
plt.title('Total survived by Year')
plt.show()

"""Le nombre de personnes ayant survécu aux accidents d'avion a augmenté au fil du temps, avec la croissance la plus significative observée dans les années 1960 et 1970.
L'augmentation du nombre de survivants au fil du temps peut être attribuée à divers facteurs, notamment les améliorations dans la technologie de sécurité des aéronefs. Les avions modernes sont équipés de dispositifs de sécurité variés tels que des ceintures de sécurité, des airbags et des matériaux ignifuges. Ces dispositifs jouent un rôle crucial dans la réduction de la gravité des blessures et des décès en cas d'accident.
"""

# Drop 'DayOfWeek' and 'month' and 'year' columns before calculating the correlation matrix
cols_to_drop = ['DayOfWeek', 'month']
corr_matrix = Accident_Airplane.drop(['year'] + cols_to_drop, axis=1).corr()
sns.heatmap(corr_matrix,annot =True,cmap ="crest")

"""La conclusion tirée de l'analyse de la corrélation suggère que le nombre de personnes décédées dans un accident d'avion est plus élevé que le nombre de personnes décédées sur le sol. Cette disparité peut être attribuée à la vulnérabilité accrue des passagers à bord de l'avion en cas d'accident. L'image révèle une proportion d'environ 76 % de décès à bord de l'avion, comparée à une proportion d'environ 24 % de décès sur le sol. Cela implique qu'à chaque accident d'avion, environ trois personnes à bord décèdent pour chaque personne décédée sur le sol. Plusieurs raisons possibles expliquent cette différence, notamment les collisions avec le sol, les explosions, les blessures, les brûlures, et une combinaison de ces facteurs. Il est crucial de noter que cette conclusion repose sur un ensemble de données limité, et des résultats différents pourraient émerger avec une base de données plus exhaustive."""

# Effectuer un groupby et compter les occurrences
operator_counts = df['Operator'].value_counts().head(15)

# Tracer le diagramme à barres
fig, ax = plt.subplots(figsize=(10, 6))
operator_counts.plot(kind='bar', ax=ax)

# Ajouter des étiquettes et des titres
plt.title('Top 15 Operators')
plt.ylabel('count accident')
plt.xlabel('Operator')


# Afficher le diagramme
plt.show()

"""Les 15 principaux opérateurs en termes de nombre d'accidents d'avion sont des compagnies aériennes importantes ou des forces militaires avec une longue expérience opérationnelle. Les États-Unis dominent la liste avec cinq représentants, suivis par l'ancienne Union soviétique avec deux opérateurs.
* les 3 premiers Aeroflot, Military-us air force ,air France .
* On dirait qu’Aeroflot a le plus grand nombre d’accidents pour tout le temps.
"""

Value_operator = Accident_Airplane['Operator'].unique()
print(Value_operator)

"""<ul style="list-style-type:none;">
  <li style="font-weight: bold;font-family:Trebuchet MS;font-size:25px;font-style: italic;color:blue">&emsp;Analyses by Flight Operator</li>
</ul>

* **Military Air Crash**
"""

# Creating a new DataFrame for Military Air Crash
militaryAirCrashDataFrame = (
    Accident_Airplane
    .copy()
    .loc[Accident_Airplane['Operator'].notna()]  # Remove NaN values of Operator
    .loc[Accident_Airplane['Operator'].str.contains('Military')]  # Check if Operator contains 'Military'
)

# Display the first 5 rows with a style
# militaryAirCrashDataFrame.head(5)

"""* **Army Air Crash**"""

# Creating a new DataFrame for Army Air Crash
ArmyAirCrashDataFrame = (
    Accident_Airplane
    .copy()
    .loc[Accident_Airplane['Operator'].notna()]  # Remove NaN values of Operator
    .loc[Accident_Airplane['Operator'].str.contains('Army')]  # Check if Operator contains 'Army'
)

# Display the first 5 rows with a style
#ArmyAirCrashDataFrame.head(5)

"""* **Navy Air Crash**"""

# Creating a new DataFrame for Navy Air Crash
NavyAirCrashDataFrame = (
    Accident_Airplane
    .copy()
    .loc[Accident_Airplane['Operator'].notna()]  # Remove NaN values of Operator
    .loc[Accident_Airplane['Operator'].str.contains('Navy')]  # Check if Operator contains 'Navy'
)

"""* **Air Force Air Crash**"""

# Creating a new DataFrame for Air Force Air Crash
AirForceAirCrashDataFrame = (
    Accident_Airplane
    .copy()
    .loc[Accident_Airplane['Operator'].notna()]  # Remove NaN values of Operator
    .loc[Accident_Airplane['Operator'].str.contains('Air Force')]  # Check if Operator contains 'Air Force'
)

# Display the first 5 rows with a style

"""* **Private Airplane Crash**"""

# Creating a new DataFrame for Private Airplane Crash
PrivateAirCrashDataFrame = (
    Accident_Airplane
    .copy()
    .loc[Accident_Airplane['Operator'].notna()]  # Remove NaN values of Operator
    .loc[Accident_Airplane['Operator'].str.contains('Private')]  # Check if Operator contains 'Private'
)

"""* **Mail Service Airplane Crash**"""

# Creating a new DataFrame for Mail Service Airplane Crash
MailServiceAirCrashDataFrame = (
    Accident_Airplane
    .copy()
    .loc[Accident_Airplane['Operator'].notna()]  # Remove NaN values of Operator
    .loc[Accident_Airplane['Operator'].str.contains('Mail Service')]  # Check if Operator contains 'Mail Service'
)

# Creating a DataFrame for Passenger Airplane Crashes
PassengerAirCrashDataFrame = Accident_Airplane.copy()

# Remove rows where Operator is in militaryAirCrashDataFrame
PassengerAirCrashDataFrame = PassengerAirCrashDataFrame[~PassengerAirCrashDataFrame['Operator'].isin(militaryAirCrashDataFrame['Operator'])]

# Remove rows where Operator is in PrivateAirCrashDataFrame
PassengerAirCrashDataFrame = PassengerAirCrashDataFrame[~PassengerAirCrashDataFrame['Operator'].isin(PrivateAirCrashDataFrame['Operator'])]

# Remove rows where Operator is in MailServiceAirCrashDataFrame
PassengerAirCrashDataFrame = PassengerAirCrashDataFrame[~PassengerAirCrashDataFrame['Operator'].isin(MailServiceAirCrashDataFrame['Operator'])]

# Counting the occurrences
countPassenger = PassengerAirCrashDataFrame['Operator'].count()
countMailService = MailServiceAirCrashDataFrame['Operator'].count()
countPrivate = PrivateAirCrashDataFrame['Operator'].count()
countMilitary = militaryAirCrashDataFrame['Operator'].count()

# Creating a DataFrame
data = ['Passenger', 'Mail Service', 'Private', 'Military']
OperatorCountdf = pd.DataFrame(data, columns=['Operator'])

# Adding the 'Count' column
counts = [countPassenger, countMailService, countPrivate, countMilitary]
OperatorCountdf['Count'] = counts

# Calculating Percentages
countsum = OperatorCountdf['Count'].sum()
percentages = OperatorCountdf['Count'] / countsum
OperatorCountdf['Percent'] = percentages

# Displaying the DataFrame
print(OperatorCountdf)

import seaborn as sns
import matplotlib.pyplot as plt

# Set the seaborn style
sns.set(style="whitegrid")

# Plotting the bar plot using seaborn
plt.figure(figsize=(10, 6))
bar_plot = sns.barplot(x='Operator', y='Percent', data=OperatorCountdf, palette='viridis')

# Adding percentage annotations
for p in bar_plot.patches:
    height = p.get_height()
    bar_plot.annotate(f'{height:.1%}', (p.get_x() + p.get_width() / 2., height),
                      ha='center', va='baseline', fontsize=10, color='black', xytext=(0, 5),
                      textcoords='offset points')

plt.title('Distribution of Operators in Air Crashes')
plt.xlabel('Operator')
plt.ylabel('Percentage')

# Display the bar plot
plt.show()

"""Cela suggère que les compagnies aériennes de passagers sont de loin le type d’exploitant le plus susceptible d’être impliqué dans un écrasement aérien. Cela est probablement dû au fait que les compagnies aériennes de passagers exploitent un volume de vols beaucoup plus élevé que les autres types d’exploitants.

Il existe un certain nombre de raisons possibles pour lesquelles les compagnies aériennes de passagers sont plus susceptibles d’être impliquées dans des accidents aériens. Une possibilité est que les compagnies aériennes de passagers sont plus susceptibles d’opérer dans des environnements complexes et difficiles, tels que des aéroports occupés et un espace aérien encombré. Une autre possibilité est que les compagnies aériennes de passagers sont plus susceptibles de transporter un grand nombre de personnes à bord, ce qui peut augmenter le risque de blessures graves en cas d’accident.
* Le pourcentage d’accidents aériens impliquant des opérateurs militaires est légèrement supérieur au pourcentage impliquant des opérateurs privés. Cela peut être dû au fait que les aéronefs militaires évoluent souvent dans des environnements plus difficiles et qu’ils sont plus susceptibles de s’aligner.

# Thank You ...
"""
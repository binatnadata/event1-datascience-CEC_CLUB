# -*- coding: utf-8 -*-
"""Team8 Data_science_event_COMPETITION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AariolNIi4R92Y_zbf4ZGiha0Ktc2-5-

# **Compétition de visualisation des données**

- **Sessions of November 2023**

<p style="text-align:center">
    <a href="https://www.linkedin.com/company/binatnadata/" target="_blank">
    <img src="https://github.com/ismailouahbi/binatnadata/blob/main/logo/logo.png?raw=true" width="100" height="100" alt="Binatna Data Logo"  />
    </a>
</p>


---
---


## Data :
Vous disposez d'un ensemble de données contenant des informations sur Airplane Crashes.
- Name : "Airplane_Crashes_and_Fatalities_Since_1908.csv"


## Tâches du défi :

1. Exploration :  Effectuez une analyse exploratoire des données pour identifier les tendances clés et les motifs...

2. Segmentation :  Analysez les données pour identifier différents segments…

4. Analyse géospatiale :  Utilisez la visualisation géospatiale pour cartographier les zones à forte “crashes”,

## Directives de créativité :

1. Utilisez une variété de techniques de visualisation (graphiques à barres, graphiques linéaires, cartes thermiques, cartes, etc.) pour transmettre différents aspects des données.

2. Concentrez-vous sur la création de visualisations attrayantes et facilement interprétables.

3. Intégrez des annotations et des légendes pour guider les spectateurs à travers l'histoire que vos visualisations racontent.

4. Envisagez d'utiliser des éléments interactifs (si possible) pour permettre aux utilisateurs d'explorer les données par eux-mêmes (Advanced)

## Exigences de soumission :

Les participants doivent soumettre un rapport complet comprenant :

1. Aperçu des principales conclusions tirées des données.
2. Visualisations abordant chacune des tâches.
3. Une brève narration expliquant la logique derrière leurs visualisations et tout choix créatif effectué.

## Critères d'évaluation :

1. Clarté et efficacité des visualisations pour transmettre des insights.
2. Profondeur de l'analyse et créativité pour aborder les tâches du défi..
3. Cohérence et narration dans la présentation..
4. Utilisation innovante des techniques et des outils de visualisation..

# INITIALISATION
"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
import plotly.express as px

"""### lire les données"""

data =pd.read_csv('/content/Airplane_Crashes_and_Fatalities_Since_1908.csv')
data

data.info()



data.shape

data.describe()







data.head()

data.isnull().sum()

# Remplacement des valeurs manquantes pour les colonnes textuelles par 'Unknown'
data['Time'] = data['Time'].fillna('Unknown')
data['Location'] = data['Location'].fillna('Unknown')
data['Operator'] = data['Operator'].fillna('Unknown')
data['Type'] = data['Type'].fillna('Unknown')
data['Flight #'] = data['Flight #'].fillna('Unknown')
data['Route'] = data['Route'].fillna('Unknown')
data['Registration'] = data['Registration'].fillna('Unknown')
data['cn/In'] = data['cn/In'].fillna('Unknown')
data['Summary'] = data['Summary'].fillna('No summary available')

# Remplacement des valeurs manquantes dans les colonnes numériques
# Remplacer par la médiane
data['Aboard'] = data['Aboard'].fillna(data['Aboard'].median())
data['Fatalities'] = data['Fatalities'].fillna(data['Fatalities'].median())
data['Ground'] = data['Ground'].fillna(0)

# Vérification des valeurs manquantes après nettoyage
print(data.isnull().sum())

data.head(3)

# Conversion des dates
data['Date'] = pd.to_datetime(data['Date'])

# Normalisation des chaînes de caractères
data['Location'] = data['Location'].str.upper()
data['Operator'] = data['Operator'].str.upper()

# Check for duplicates
data[data.duplicated(keep= False) == True]
print('The number of duplicates is:', data.duplicated().sum())

# Suppression des doublons
data = data.drop_duplicates()

# Vérification du nombre de lignes après suppression des doublons
print(f"Nombre de lignes après suppression des doublons : {data.shape[0]}")

# Extraction de l'année, du mois et du jour à partir de la colonne 'Date'
# Cela peut être utile pour des analyses basées sur des tendances temporelles
data['Year'] = data['Date'].dt.year  # Extraire l'année
data['Month'] = data['Date'].dt.month  # Extraire le mois
data['Day'] = data['Date'].dt.day  # Extraire le jour

# Extraction du pays de l'accident
# On suppose que le pays est la dernière partie de la colonne 'Location', séparée par une virgule
data['Country'] = data['Location'].str.split(', ').str[-1]
# Ce code divise la colonne 'Location' en une liste, en utilisant la virgule comme séparateur, et prend le dernier élément de cette liste

# Catégorisation de la gravité de l'accident en fonction du nombre de décès
# Utilise 'pd.cut' pour créer des catégories basées sur des intervalles de nombres de décès
data['Severity'] = pd.cut(data['Fatalities'], bins=[0, 50, 100, np.inf], labels=['Low', 'Medium', 'High'])
# Les accidents sont classés comme 'Low', 'Medium' ou 'High' en fonction du nombre de décès

# Calcul du taux de survie
# Cette colonne montre le pourcentage de personnes ayant survécu à l'accident
data['Survival_Rate'] = ((data['Aboard'] - data['Fatalities']) / data['Aboard']) * 100
# Le taux de survie est calculé en soustrayant le nombre de décès du nombre de personnes à bord, divisé par le nombre total de personnes à bord, et multiplié par 100 pour obtenir un pourcentage

# Extraction de l'heure de l'accident à partir de la colonne 'Time'
# Utile pour analyser si l'heure de la journée a une influence sur les accidents
data['Hour'] = pd.to_datetime(data['Time'], format='%H:%M', errors='coerce').dt.hour
# Convertit la colonne 'Time' en un objet datetime pour extraire l'heure. 'errors='coerce'' convertit les valeurs non valides en NaT (Not a Time)

# Créer un graphique linéaire pour montrer le nombre d'accidents par année.
print(data['Year'].value_counts())

accidents_per_year = data.groupby('Year').size()


plt.figure(figsize=(14, 7))
plt.plot(accidents_per_year.index, accidents_per_year.values, marker='o', linestyle='-', color='g')
plt.title('Number of Airplane Accidents Per Year')
plt.xlabel('Year')
plt.ylabel('Number of Accidents')
plt.grid(True)
plt.show()

# Afficher les statistiques descriptives du nombre d'accidents par année.
# accidents_per_year.describe()

# Extraction du mois à partir de la date de l'accident
data['Month'] = data['Date'].dt.month

# Comptage des accidents par mois
accidents_by_month = data['Month'].value_counts().sort_index()

# Visualisation des accidents par mois
plt.figure(figsize=(10, 6))
accidents_by_month.plot(kind='bar')
plt.plot( accidents_by_month.values, marker='o', linestyle='-', color='b')
plt.title('Nombre d\'accidents par mois')
plt.xlabel('Mois')
plt.ylabel('Nombre d\'accidents')
plt.show()

# Tendances journalières
plt.figure(figsize=(12, 6))
data.groupby('Day').size().plot(kind='bar', color='lightcoral')
plt.title('Nombre d\'incidents ou d\'accidents par jour du mois')
plt.xlabel('Jour du mois')
plt.ylabel('Nombre d\'incidents ou d\'accidents')
plt.show()

# Tendances horaires
plt.figure(figsize=(12, 6))
data.groupby('Hour').size().plot(kind='bar', color='gold')
plt.title('Nombre d\'incidents ou d\'accidents par heure de la journée')
plt.xlabel('Heure de la journée')
plt.ylabel('Nombre d\'incidents ou d\'accidents')
plt.show()

plt.pie(accidents_by_type.head(10), labels=accidents_by_type.head(10).index, autopct='%1.1f%%', startangle=90)
plt.title("Nombre d\'accidents par type d\'avion (Top 10)", fontsize=16)
plt.show()

# Comptage des accidents par type d'avion
accidents_by_type = data['Type'].value_counts().head(10)
print("Les 10 types les plus fréquemment impliquées :\n", accidents_by_type)

# Visualisation des accidents par type d'avion (Top 10)
fig, ax = plt.subplots(figsize=(16,10))
sns.barplot(x=accidents_by_type, y=accidents_by_type.index, data=data[:20], orient='h')
plt.title('Top 10 des types avec le plus grand nombre  d\'accidents')
plt.ylabel('Types')
plt.xlabel('Nombre  d\'accidents')

# Examiner les routes les plus fréquentes
top_routes = data['Route'].value_counts().head(10)
print("\nLes 10 routes les plus fréquentes :\n", top_routes)

# Visualisation : Top 10 des routes les plus fréquentes
plt.figure(figsize=(10, 6))
top_routes.plot(kind='bar', color='blue')
plt.title('Top 10 des routes les plus fréquentes concernées par des incidents')
plt.xlabel('Route')
plt.ylabel('Nombre d\'incidents')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Analyser les compagnies les plus fréquemment impliquées
top_operators = data['Operator'].value_counts().head(10)
print("Les 10 compagnies les plus fréquemment impliquées :\n", top_operators)

# Comparer les compagnies en fonction du nombre de victimes
operator_fatalities = data.groupby('Operator')['Fatalities'].sum().nlargest(10)
print("\nTop 10 des compagnies avec le plus grand nombre de victimes :\n", operator_fatalities)

# Visualisation : Top 10 des compagnies les plus fréquemment impliquées
plt.figure(figsize=(10, 6))
top_operators.plot(kind='bar', color='red')
plt.title('Top 10 des compagnies avec le plus grand nombre d\'incidents ou d\'accidents')
plt.xlabel('Compagnie')
plt.ylabel('Nombre d\'incidents ou d\'accidents')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Analyser les lieux les plus fréquents des incidents
top_locations = data['Location'].value_counts().head(15)
print("Les 10 lieux les plus fréquents des incidents :\n", top_locations)

# Visualiser les emplacements sur une carte (exemple : diagramme à barres des 10 premiers lieux)
plt.figure(figsize=(10, 6))
top_locations.plot(kind='bar', color='salmon')
plt.title('Top 10 des lieux avec le plus grand nombre d\'incidents ou d\'accidents')
plt.xlabel('Lieu')
plt.ylabel('Nombre d\'incidents ou d\'accidents')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Examiner les routes les plus fréquentes
top_routes = data['Route'].value_counts().head(10)
print("\nLes 10 routes les plus fréquentes :\n", top_routes)

# Visualisation : Top 10 des routes les plus fréquentes
plt.figure(figsize=(10, 6))
top_routes.plot(kind='bar', color='blue')
plt.title('Top 10 des routes les plus fréquentes concernées par des incidents')
plt.xlabel('Route')
plt.ylabel('Nombre d\'incidents')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

top_types = data['Type'].value_counts()

top10= data[data['Year']==1972].sort_values(by = ['Fatalities'], ascending = False)[['Type','Aboard','Fatalities','Ground']]
top10.set_index('Type').plot(kind='bar',stacked=True , figsize =(15,10))
plt.title('Les types en foctions Aboard, Fatalities, Ground')
plt.xlabel('Types')
plt.ylabel('Frequences ')

top_operators = data['Operator'].value_counts()

accidents_per_year = data.groupby('Year').size()

top10= data[data['Year']==1972].sort_values(by = ['Fatalities'], ascending = False)[['Operator','Aboard','Fatalities','Ground']]
top10.set_index('Operator').plot(kind='bar',stacked=True , figsize =(16,10))

correlation_matrix = data.drop('Operator', axis=1).corr()
plt.figure(figsize=(15, 10))
sns.heatmap(correlation_matrix, annot=True, cmap="crest")

data_operator = data[data['Year']== 1972]



top_operators = data_operator['Operator'].value_counts().head(10)
print("Les 10 compagnies les plus fréquemment impliquées :\n", top_operators)


plt.figure(figsize=(10, 6))
top_operators.plot(kind='bar', color='red')
plt.title('Top 10 des compagnies avec le plus grand nombre d\'accidents en 1972')
plt.xlabel('Compagnie')
plt.ylabel('Nombre d\'accidents ')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

data_operator[data_operator['Operator'] == 'AEROFLOT']

data_operator[data_operator['Operator'] == 'MILITARY - U.S. AIR FORCE']

data_type = data[data['Year']== 1972]



top_types = data_type['Type'].value_counts().head(10)


plt.figure(figsize=(10, 6))
top_types.plot(kind='bar', color='blue')
plt.title('Top 10 des types d avions avec le plus grand nombre d\'accidents en 1972')
plt.xlabel('Compagnie')
plt.ylabel('Nombre d\'accidents ')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

data_type[data_type['Type'] == 'Lockheed C-130E Hercules']

data_type[data_type['Type'] == 'Lockheed AC-130A Hercules']

import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from collections import Counter
import re

text = ' '.join(data['Summary'].dropna().tolist())

# Nettoyage et prétraitement du texte
text = re.sub(r'[^a-zA-Z\s]', '', text)  # Suppression des caractères non alphabétiques
text = text.lower()  # Conversion en minuscules

# Comptage des mots
word_counts = Counter(text.split())
most_common_words = word_counts.most_common(20)

# Création d'un nuage de mots
wordcloud = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(word_counts)

# Affichage du nuage de mots
plt.figure(figsize=(15, 7))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()





"""# Data Analysis (C) 2023 [BinatnaData](https://www.linkedin.com/company/100193879/) Corporation

<p style="text-align:center">
    <a href="https://www.linkedin.com/company/binatnadata/" target="_blank">
    <img src="https://github.com/ismailouahbi/binatnadata/blob/main/logo/logo.png?raw=true" width="100" height="100" alt="Binatna Data Logo"  />
    </a>
</p>
"""